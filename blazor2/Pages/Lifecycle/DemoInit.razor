@*  page router là on-init -> link trên header  *@
@page "/on-init"
@inject HttpClient _http
@inject NavigationManager _nav
@using System.Net.Http.Json
@using System.Text.Json
@using blazor2.Pages.Lifecycle.Parameter
<div class="container">
    <h3>Lifecycle - On Init</h3>
    <p>Demo về các hàm khởi tạo trong Blazor</p>
    <button class="btn btn-primary" @onclick="LoadData">Tải dữ liệu</button>
    <br>
    <h3>Categories</h3>
    @foreach (var item in lsCate)
    {
        <span class="badge bg-secondary">@item</span>
    }
    <h3>Countries</h3>
    @foreach (var item in lsCountry)
    {
        <span class="badge bg-info">@item</span>
    }
    <div class="row">
        @foreach (var item in ls)
        {
            <div class="col-4">
                <div class="card text-start">
                    <img class="card-img-top" style="height:300px;object-fit:cover" src="@item.Img" alt="Title" />
                    <div class="card-body">
                        <h4 class="card-title">@item.Name</h4>
                        <p class="card-text">@item.Price</p>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-success" @onclick="()=>ViewDetail(item)">Xem chi tiết</button>
                    </div>
                </div>

            </div>
        }
    </div>
    @if(selected != null)
    {
        <h3>Chi tiết sản phẩm</h3>
        <Param_ProductDetail prod="@selected"/>
    }
</div>
@code {
    List<ProductApiVM> ls = new List<ProductApiVM>();
    List<string> lsCate = new List<string>();
    List<string> lsCountry = new List<string>();

    // async/ await là xử lý bất đồng bộ
    // khi gọi hàm bất đồng bộ thì phải dùng await
    // await chờ hàm xửa lý xong , nhưng không làm treo hệ thống

    // Task : là kiểu trả về của hàm bất đồng bộ
    // Task<T> : hàm bất đồng bộ trả về kiểu T
    // Task : hàm bất đồng bộ không trả về gì
    // kết quả không trả về ngay mà trả về sau khi hàm xử lý xong
    public async Task LoadData()
    {
        Console.WriteLine("Load data");
        // lấy dự liệu từ web ai của 1 server khác
        // dùng httpclient
        List<ProductApiVM> data = await
        _http.GetFromJsonAsync<List<ProductApiVM>>("https://svcy.myclass.vn/api/ProductApi/getall");
        Console.WriteLine(JsonSerializer.Serialize(data));
        ls = data;
        @* StateHasChanged(); *@

    }
    public async Task LoadDataJson()
    {
        var data = await _http.GetFromJsonAsync<DataJsonAPI>($"{_nav.BaseUri}/data/data.json");
        Console.WriteLine(JsonSerializer.Serialize(data));
        lsCate = data.Categories;
        lsCountry = data.Countries;
    }
    // sẽ gọi hàm này khi component được khởi tạo
    @* protected async override void OnInitialized()
    {
        Console.WriteLine("On init page được gọi");
        await LoadData();
        await LoadDataJson();
        StateHasChanged();// thông tháo component đã thay đổi dữ liệu
    } *@
    protected async override Task OnInitializedAsync()
    {
        Console.WriteLine("On init page được gọi");
        await LoadData();
        await LoadDataJson();

    }
    public ProductApiVM selected;
    public void ViewDetail(ProductApiVM p)
    {
        Console.WriteLine("View detail");
        selected = p;
    }
}
